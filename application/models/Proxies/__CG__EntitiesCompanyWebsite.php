<?php

namespace Proxies\__CG__\Entities\Company;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Website extends \Entities\Company\Website implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getCompany()
    {
        $this->__load();
        return parent::getCompany();
    }

    public function setCompany(\Entities\Company $Company)
    {
        $this->__load();
        return parent::setCompany($Company);
    }

    public function addAccount(\Entities\Company\Website\Account $Account)
    {
        $this->__load();
        return parent::addAccount($Account);
    }

    public function getAccounts()
    {
        $this->__load();
        return parent::getAccounts();
    }

    public function addResource(\Entities\Company\Website\Resource $Resource)
    {
        $this->__load();
        return parent::addResource($Resource);
    }

    public function getResources()
    {
        $this->__load();
        return parent::getResources();
    }

    public function removeResource(\Entities\Company\Website\Resource $Resource)
    {
        $this->__load();
        return parent::removeResource($Resource);
    }

    public function addMenu(\Entities\Company\Website\Menu $Menu)
    {
        $this->__load();
        return parent::addMenu($Menu);
    }

    public function getMenus()
    {
        $this->__load();
        return parent::getMenus();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getUrl()
    {
        $this->__load();
        return parent::getUrl();
    }

    public function setUrl($url)
    {
        $this->__load();
        return parent::setUrl($url);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getTypeDisplay($type = NULL)
    {
        $this->__load();
        return parent::getTypeDisplay($type);
    }

    public function getTypeOptions()
    {
        $this->__load();
        return parent::getTypeOptions();
    }

    public function populate(array $array)
    {
        $this->__load();
        return parent::populate($array);
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'name', 'type', 'url', 'Company', 'Accounts', 'Resources', 'Menus');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}